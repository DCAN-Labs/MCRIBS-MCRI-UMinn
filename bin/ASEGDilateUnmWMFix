#!/usr/bin/env python3

import numpy
import sys
import os
import nibabel
import scipy.ndimage.morphology

if len(sys.argv) < 4:
    print("Incorrect number of arguments")
    print()
    print("Usage: " + sys.argv[0] + " <input mgz> <ribbon mgz> <out mgz>")
    print("Changes the optic chiasm label in the aseg, requires the ribbon")
    quit()

ASEGFileName = sys.argv[1]
RibbonFileName = sys.argv[2]
OutFileName = sys.argv[3]

if not os.path.isfile(ASEGFileName):
    print("ASEG file not found " + ASEGFileName) 
    quit()

ASEGNII = nibabel.load(ASEGFileName)
ASEGIMG = ASEGNII.get_data()

RibbonNII = nibabel.load(RibbonFileName)
RibbonIMG = RibbonNII.get_data()

NewASEGIMG = numpy.array(ASEGIMG)

CurUnWMIMG = numpy.reshape(numpy.in1d(ASEGIMG, numpy.array([85, 48, 9])), ASEGIMG.shape)

NewASEGIMG[numpy.logical_and(CurUnWMIMG, RibbonIMG == 2)] = 159
NewASEGIMG[numpy.logical_and(CurUnWMIMG, RibbonIMG == 41)] = 160

NumDilations = 5

for z in range(NumDilations):
    CurUnWMIMG = numpy.logical_and(numpy.logical_or(ASEGIMG == 85, ASEGIMG == 0), scipy.ndimage.morphology.binary_dilation(CurUnWMIMG))

NewASEGIMG[numpy.logical_and(CurUnWMIMG, ASEGIMG == 0)] = 24

#CSFOverlap = numpy.logical_and(ASEGIMG == 24, WMSEGIMG)
#if numpy.any(CSFOverlap):
#    print "CSF"

NewASEGNII = nibabel.MGHImage(NewASEGIMG, ASEGNII.affine, ASEGNII.header)

nibabel.save(NewASEGNII, sys.argv[3])
