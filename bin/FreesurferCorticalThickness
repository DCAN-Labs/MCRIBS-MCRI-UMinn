#!/usr/bin/env python

import vtk
import numpy
import sys
import os
import freesurfer
import nibabel
import getopt

import VTPUtils
import GraphUtils

#@profile
def main():
	opts, args = getopt.getopt(sys.argv[1:], "vh", [])

	if len(args) != 2:
		print "The "
		print sys.argv[0] + " <subject id> <hemi>"
		exit()

#numpy.set_printoptions(precision = 3, formatter = {'all':lambda x: "%.3f" % x})

	geometryNIIFile = None

	verbose = False
	for o, a in opts:
		if o == '-v':
			verbose = True

	SubjId = args[0]
	Hemi = args[1]

	SurfDir = os.path.join(os.environ['SUBJECTS_DIR'], SubjId, 'surf')

	if not os.path.isdir(SurfDir):
		print "Could not find surface directory: " + SurfDir
		exit()


	WhiteSurf = freesurfer.readSurf(os.path.join(SurfDir, Hemi + '.white'))
	PialSurf = freesurfer.readSurf(os.path.join(SurfDir, Hemi + '.pial'))

	maxOrder = 10

	vertexNeighbours = GraphUtils.getVertexNeighbours(WhiteSurf)

	numVertices = WhiteSurf['vertices'].shape[1]
	
	PialVT = PialSurf['vertices'].T

	corticalThickness = numpy.zeros(numVertices)

	for z in range(numVertices):
		curNeighbours = numpy.array([z])
		
		curV = WhiteSurf['vertices'][:, z] 
		XC = curV - PialSurf['vertices'][:, z]
		minDist = numpy.sqrt(numpy.sum(XC * XC))
		
		nextNeighboursMask = numpy.zeros(numVertices, dtype = numpy.bool)
		
		verticesVisited = numpy.zeros(numVertices, dtype = numpy.bool)
		verticesVisited[z] = True
		curV = numpy.atleast_2d(curV)
		for curOrder in range(1, maxOrder + 1):
			# find the next set of neighbours
			nextNeighbours = [vertexNeighbours[x] for x in curNeighbours]
			#nextNeighbours = numpy.unique(numpy.concatenate(nextNeighbours))
			nextNeighboursMask.fill(False)
			for k in range(len(nextNeighbours)):
				nextNeighboursMask[nextNeighbours[k]] = True
			nextNeighboursMask = numpy.logical_and(numpy.logical_not(verticesVisited), nextNeighboursMask)
			curNeighbours = numpy.where(nextNeighboursMask)[0]
			
			verticesVisited = numpy.logical_or(nextNeighboursMask, verticesVisited)
			XC = curV - numpy.take(PialVT, curNeighbours, axis = 0)
			curMinDist = numpy.min(numpy.sqrt(numpy.sum(XC * XC, axis = 1)))
			
			if curMinDist < minDist:
				minDist = curMinDist
			else:
				corticalThickness[z] = minDist
				break

	outC = dict()
	outC['numVertices'] = PialSurf['vertices'].shape[1]
	outC['numFaces'] = PialSurf['faces'].shape[1]
	outC['values'] = numpy.single(corticalThickness)
	freesurfer.writeCurv(outC, os.path.join(SurfDir, Hemi + '.thickness'))

if __name__ == "__main__":
	main()


