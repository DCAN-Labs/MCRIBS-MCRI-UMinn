#!/usr/bin/env python3

import os
import re
import subprocess
import sys

#from nifti import *;
#import nifti.clib as ncl

import nibabel

import numpy

import scipy.ndimage

import NIFTIOrientationTools

def otsu(IMG):
    hist, bin_edges = numpy.histogram(IMG, bins=list(range(257)),  density=True)
    OmegaK = numpy.cumsum(hist)
    MuK = numpy.cumsum(numpy.arange(0, 256, 1) * hist)
    MuT = numpy.sum(numpy.arange(0, 256, 1) * hist)
    OmegaZero = OmegaK
    OmegaOne = 1 - OmegaK
    MuZero = numpy.zeros(OmegaZero.shape)
    MuOne = numpy.zeros(OmegaZero.shape)

    MuZero[numpy.where(OmegaK > 0)] = MuK[numpy.where(OmegaK > 0)] / OmegaK[numpy.where(OmegaK > 0)]
    MuOne[numpy.where(OmegaK < 1)] = (MuT - MuK[numpy.where(OmegaK < 1)]) / (1 - OmegaK[numpy.where(OmegaK < 1)])
    
    SigmaZero = numpy.zeros(OmegaZero.shape)
    SigmaOne = numpy.zeros(OmegaZero.shape)
    
    for i in range(256):
        if OmegaOne[i] > 0:
            IndicesAfterI = numpy.arange(i + 1, 255, 1)
            SigmaOne[i] = numpy.sum(hist[IndicesAfterI] * (IndicesAfterI - MuOne[i]) * (IndicesAfterI - MuOne[i]) / OmegaOne[i])
    
    SigmaB = OmegaZero * OmegaOne * (MuOne - MuZero) * (MuOne - MuZero)
    
    SigmaB2 = numpy.zeros(OmegaZero.shape)

    SigmaB2Mask = numpy.logical_and(OmegaK > 0, OmegaK < 1)
    SigmaB2[numpy.where(SigmaB2Mask)] = ((MuT * OmegaK[numpy.where(SigmaB2Mask)] - MuK[numpy.where(SigmaB2Mask)]) * (MuT * OmegaK[numpy.where(SigmaB2Mask)] - MuK[numpy.where(SigmaB2Mask)])) / (OmegaK[numpy.where(SigmaB2Mask)] * (1 - OmegaK[numpy.where(SigmaB2Mask)]))

    return numpy.argmax(SigmaB2)

if len(sys.argv) < 2:
    print("usage: " + sys.argv[0] + " <subjectid>")
    quit()
else:
    if len(sys.argv) > 2:
        if sys.argv[2] == '-no-initial-crop':
            NoZCropping = True
        else:
            NoZCropping = False
    else:
        NoZCropping = False

    InputDir = 'RawT2'
    OutputDir = 'T2NeckCroppedIsotropic'
    
    NIIFileNameBase = os.path.join(InputDir, sys.argv[1])

    if os.path.isfile(NIIFileNameBase + '.nii') or os.path.isfile(NIIFileNameBase + '.nii.gz'):
        inputNII = nibabel.load(NIIFileNameBase + ".nii.gz")
        # reorient to MNI orientation
        inputAXCodes = nibabel.aff2axcodes(inputNII.affine)
        inputOrnt = nibabel.orientations.axcodes2ornt(inputAXCodes)
        
        #refNII = nibabel.load(os.path.join(os.environ['FSLDIR'], 'data', 'standard', 'MNI152_T1_2mm.nii.gz'))
        refNII = nibabel.load(os.path.join(os.environ['TEMPLATEDIR'], 'Finaltemplate0.nii.gz'))
        refAXCodes = nibabel.aff2axcodes(refNII.affine)
        refOrnt = nibabel.orientations.axcodes2ornt(refAXCodes)

        inputToRefTransformOrnt = nibabel.orientations.ornt_transform(inputOrnt, refOrnt)
        inputIMG = nibabel.orientations.apply_orientation(numpy.asanyarray(inputNII.dataobj), inputToRefTransformOrnt)
        
        outputAffine = NIFTIOrientationTools.applyOrntToNIIAffine(inputNII, inputToRefTransformOrnt)
        
        #I = numpy.where(inputIMG > 0)
        
        #inputIMG = numpy.take(inputIMG, list(range(  numpy.min(I[0]), numpy.max(I[0]) + 1)), axis = 0)
        #inputIMG = numpy.take(inputIMG, list(range(  numpy.min(I[1]), numpy.max(I[1]) + 1)), axis = 1)
        # this bit doesnt modify the sform translation as it should, I'm going to outsource it to fslroi
        
        OutFileNII = nibabel.Nifti1Image(inputIMG, outputAffine)
        nibabel.save(OutFileNII, os.path.join(OutputDir, sys.argv[1] + '_maxlabel_cropped.nii.gz'))
