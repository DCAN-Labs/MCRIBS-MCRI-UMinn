#!/usr/bin/env python3

import os
import getopt
import sys

import subprocess

import argparse
import numpy

def runCommand(CMD):
	print("Running command:")
	print("\t" + " ".join(CMD))
	try:
		subprocess.check_call(CMD)
	except subprocess.CalledProcessError:
		print("Command Failed")
		quit()

def structN4DefaultOptions():
	return ['-v', '-c', '[100x100x100x100,0]', '-b', '[200]', '-s', '3']

def main():
	doProcessingSteps = dict.fromkeys(['conform', 'tissueseg', 'surfrecon', 'cortparc', 'surfreg'])
	
	atlases = ['aparc', 'aparc+DKTatlas']
	defaultAtlas = atlases

	argParser = argparse.ArgumentParser(description = "Performs MCRIB preprocessing and parcellation\n\nFor each <subject id>, input data are to be placed as follows:\n\tRawT2/<subject id>.nii.gz: Whole-brain T2-weighted image", usage = sys.argv[0] + " <processing directives> [processing options] <subject id>", formatter_class = argparse.RawTextHelpFormatter)

	conformArgGroup = argParser.add_argument_group('conform', "PROCESSING DIRECTIVE. Reorients to radiological, axial slice orientation. Resamples to isotropic voxels")
	conformArgGroup.add_argument('--conform', help = "PROCESSING DIRECTIVE", action = 'store_true')
	conformArgGroup.add_argument('--voxelsize', help = "Voxel size to use for isotropic resampling. Use \"volumepreserve\" to preserve original voxel volume", required = False, type = str, action = 'store', default = 'volumepreserve')
	
	tissueSegArgGroup = argParser.add_argument_group('tissueseg', "Perform tissue type segmentation, depends --conform")
	tissueSegArgGroup.add_argument('--tissueseg', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
	tissueSegArgGroup.add_argument('--tissuesegmethod', help = "Specify tissue segmentation method", required = False, choices = ['DrawEM'], default = 'DrawEM')
	tissueSegArgGroup.add_argument('--subjectage', help = "Subject age in weeks", required = False, choices = numpy.arange(28, 45), default = 40)
	
	surfReconArgGroup = argParser.add_argument_group('surfrecon', 'Perform cortical surface extraction, depends --tissueseg')
	surfReconArgGroup.add_argument('--surfrecon', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
	surfReconArgGroup.add_argument('--surfreconmethod', help = "Specify cortical surface extraction method", required = False, choices = ['Deformable'], default = 'Deformable')
	surfReconArgGroup.add_argument('--deformablejointhresh', help = "Join threshold parameter for Deformable", required = False, type = float, default = 1)
	
	inflateSphereArgGroup = argParser.add_argument_group('inflatesphere', 'Perform inflation, spherical mapping, curv, area, depends --surfrecon')
	inflateSphereArgGroup.add_argument('--inflatesphere', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
	
	surfRegArgGroup = argParser.add_argument_group('surfreg', 'Perform surface registration to the spherical template, depends --surfrecon')
	surfRegArgGroup.add_argument('--surfreg', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
	
	cortRibbonArgGroup = argParser.add_argument_group('cortribbon', 'Perform cortical ribbon volume generation, depends --surfrecon')
	cortRibbonArgGroup.add_argument('--cortribbon', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
	
	surfParcArgGroup = argParser.add_argument_group('cortparc', 'Perform cortical parcellation, depends on --surfreg')
	surfParcArgGroup.add_argument('--cortparc', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
	surfParcArgGroup.add_argument('--cortparcatlases', help = "Parcellation scheme to use", required = False, choices = atlases, default = defaultAtlas, nargs = "+")

	aparc2asegArgGroup = argParser.add_argument_group('aparc2aseg', 'Perform cortical parcellation, depends on --surfreg')
	aparc2asegArgGroup.add_argument('--aparc2aseg', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
	aparc2asegArgGroup.add_argument('--aparc2asegatlases', help = "Parcellation scheme to use", required = False, choices = atlases, nargs = '+', default = defaultAtlas)

	apas2asegArgGroup = argParser.add_argument_group('apas2aseg', 'Refine aseg.presurf using cortical parcellations, depends on --aparc2aseg with aparc')
	apas2asegArgGroup.add_argument('--apas2aseg', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
	
	segstatsArgGroup = argParser.add_argument_group('segstats', 'Perform segstats on the aseg image, depends on --apas2aseg')
	segstatsArgGroup.add_argument('--segstats', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')

	argParser.add_argument('-openmp', '--openmp', '-nthreads', '--nthreads', help = "Number of threads for multithreading applications", required = False, type = int, default = 1)
	argParser.add_argument('-hemi', '--hemi', help = "Only process a single hemisphere", choices = ['lh', 'rh'], required = False)
	
	argParser.add_argument('subjectid', help = "The subject ID, must have RawT2/<subjectid>.nii.gz")

	options = argParser.parse_args()
	
	#argParser.print_help()
	#print(vars(options))
#print(type(options.openmp))
	#quit()
	anyProcessingStep = False
	#defaultAtlas = ['aparc+DKTatlas']
	#defaultAtlas = ['aparc']

	for curStep in doProcessingSteps.keys():
		if vars(options)[curStep]:
			anyProcessingStep = True
	
	#if anyProcessingStep == False:
	#	print("No processing steps specified")
	#	argParser.print_help()
	#	quit()
	
	# export OMP_NUM_THREADS=options.openmp
	os.environ['OMP_NUM_THREADS'] = str(options.openmp)
	
	if not options.hemi is None:
		Hemis = [options.hemi]
	else:
		Hemis = 'both'
	
	if options.conform == True:
		cmd = ["MCRIBConform", os.path.join('RawT2', options.subjectid + ".nii.gz"), options.voxelsize, os.path.join('RawT2RadiologicalIsotropic', options.subjectid + ".nii.gz")]
		runCommand(cmd)
		#rint("--struct-reorient no longer needed, ignoring")
		pass
	
	if options.tissueseg == True:
		if options.tissuesegmethod == 'DrawEM':
			cmd = ["MCRIBTissueSegDrawEM", options.subjectid]
			runCommand(cmd)
		pass	
	
	if options.surfrecon == True:
		cmd = ["MCRIBSurfReconDeformable", options.subjectid, str(options.deformablejointhresh)]
		runCommand(cmd)
		pass
	
	if options.inflatesphere == True:
		cmd = ["MCRIBInflateSphere", options.subjectid, Hemis]
		runCommand(cmd)
		pass
	
	if options.cortribbon == True:
		cmd = ["MCRIBVolMask", options.subjectid]
		runCommand(cmd)
		pass
	
	if options.surfreg == True:
		for curHemi in Hemis:
			cmd = ["MCRIBSurfReg", options.subjectid, curHemi]
			runCommand(cmd)
		pass
	
	if options.cortparc == True:
		cmd = ["MCRIBCortParc", options.subjectid, Hemis]
		cmd.extend(options.cortparcatlases)
		runCommand(cmd)
		pass
	
	if options.aparc2aseg == True:
		cmd = ["MCRIBAPARC2ASEG", options.subjectid]
		cmd.extend(options.aparc2asegatlases)
		runCommand(cmd)
		pass
	
	if options.apas2aseg == True:
		cmd = ["MCRIBAPAS2ASEG", options.subjectid]
		runCommand(cmd)
		pass
	
	if options.segstats == True:
		cmd = ["MCRIBSegStats", options.subjectid]
		runCommand(cmd)
		pass

	quit()
#def main():

if __name__ == "__main__":
	main()
