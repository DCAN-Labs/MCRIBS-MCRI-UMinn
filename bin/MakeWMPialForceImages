#!/usr/bin/env python3

import numpy
import sys
import os
import nibabel
import scipy.ndimage
import numpy.linalg

def largestComponent(BW):
    if not numpy.any(BW):
        return BW
    else:
        L, numLabels = scipy.ndimage.label(BW)
        H = numpy.bincount(L[L > 0])
        return (L == numpy.argmax(H))

def ismember(A, B):
    return numpy.reshape(numpy.in1d(A.ravel(), numpy.array(B)), A.shape)

def dilateWithMaskBarrier(BW, M, nDilate = 20):
    """
    Dilates BW nDilate iterations but makes sure to not go through the mask M.
    """
    
    BWDilated = numpy.logical_and(scipy.ndimage.binary_dilation(BW, iterations = nDilate), M)
    L, numLabels = scipy.ndimage.label(BWDilated)
    labelsInOriginal = numpy.unique(L[BW])
    return ismember(L, labelsInOriginal)

if len(sys.argv) < 2:
    print("Usage: " + sys.argv[0] + " <subject id>")
    quit()

# makes the WM force images, replaces most of the run_surfrecon.sh script for speed
#@profile
def main():
    subjID = sys.argv[1]
    try:
        TissueSegDir = os.environ['TISSUESEGDIR']
    except Exception:
        TissueSegDir = 'TissueSegMCRIBS'
    
    if not os.path.isdir(os.path.join(TissueSegDir, subjID)):
        print("Tissue segmentation directory not found")
        quit()
    T2NII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_t2w_restore.nii.gz"))
    T2IMG = numpy.single(T2NII.get_fdata())
    
    LabelFusionNII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_labelfusionimage_dkt_antsinit.nii.gz"))
    LabelFusionIMG = numpy.uint16(LabelFusionNII.get_fdata())

    LabelFusionEditedNII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_labelfusionimage_dkt_antsinit_edited.nii.gz"))
    LabelFusionEditedIMG = numpy.uint16(LabelFusionEditedNII.get_fdata())
    
    RegionsNII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_labelfusionimage_regions.nii.gz"))
    RegionsIMG = numpy.uint16(RegionsNII.get_fdata())
    
    InterhemisphericNII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_labelfusionimage_interhemispheric.nii.gz"))
    InterhemisphericIMG = (InterhemisphericNII.get_fdata()) > 0
    
    BrainmaskNII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_brain_mask.nii.gz"))
    BrainmaskIMG = (BrainmaskNII.get_fdata()) > 0

    WMForceIMG = numpy.zeros(T2IMG.shape, dtype = numpy.single)
    PialForceIMG = numpy.zeros(T2IMG.shape, dtype = numpy.single)
    
    # WM FORCE: set amygdala, lateral ventricle to expand (-1)
    #WMForceIMG[ismember(LabelFusionEditedIMG, [18, 54, 4, 43, 31, 63])] = -1
    WMForceIMG[ismember(LabelFusionEditedIMG, [18, 54])] = -1

    T = scipy.ndimage.binary_dilation(ismember(LabelFusionEditedIMG, [4, 43, 31, 63]), iterations = 2)
    
    LabelFusionEditedIMGGM = numpy.logical_or(numpy.logical_and(LabelFusionEditedIMG >= 1000, LabelFusionEditedIMG <= 1035), numpy.logical_and(LabelFusionEditedIMG >= 2000, LabelFusionEditedIMG <= 2035))

    WMForceIMG[numpy.logical_and(T, numpy.logical_not(LabelFusionEditedIMGGM))] = -3
    
    LabelFusionEditedIMGWMMask = numpy.logical_and(LabelFusionEditedIMG == 2, LabelFusionEditedIMG == 41)
    
    # WM FORCE: set eroded hippocampus to expand (-1)
    WMForceIMG[scipy.ndimage.binary_erosion(ismember(LabelFusionEditedIMG, [17, 53]))] = -1
    
    # WM FORCE: set interhemispheric to restrict (1)
    WMForceIMG[InterhemisphericIMG] = 1
    
    # make brainmask distance transform, distance from brainmask+cerebellum edge
    
    BrainMaskCerebellumDTMask = numpy.logical_and(BrainmaskIMG, numpy.logical_not(ismember(LabelFusionEditedIMG, [91, 93, 70, 71, 72, 73, 74, 75, 76])))
    BrainMaskCerebellumDT = scipy.ndimage.distance_transform_edt(BrainMaskCerebellumDTMask, sampling = T2NII.header.get_zooms())
    
    #LabelFusionEditedIMGGM = numpy.logical_or(numpy.logical_and(LabelFusionEditedIMG >= 1000, LabelFusionEditedIMG <= 1035), numpy.logical_and(LabelFusionEditedIMG >= 2000, LabelFusionEditedIMG <= 2035))

    # WM FORCE: add voxels that are near the edge of the BrainMaskCerebellumDT to restrict at 0.5
    WMForceIMG[numpy.logical_and(numpy.logical_and(BrainMaskCerebellumDT < 4, BrainMaskCerebellumDTMask), LabelFusionEditedIMGGM)] = 1
    
    # PIAL FORCE: add voxels that are near the edge of the brain in the GM mask to expand 
    PialForceIMG[numpy.logical_and(BrainMaskCerebellumDT < 4, LabelFusionEditedIMGGM)] = -1
    
    PialForceIMG[numpy.logical_not(BrainMaskCerebellumDTMask)] = 1

    del LabelFusionEditedIMGGM
    del BrainMaskCerebellumDTMask
    
    # WM FORCE: fill in gap between CC and Thalamus to expand (-2)
    CCThalamusMask = scipy.ndimage.binary_closing(ismember(LabelFusionEditedIMG, [192, 9, 48]), iterations = 5)
    WMForceIMG[CCThalamusMask] = -2
    
    del CCThalamusMask
    del BrainMaskCerebellumDT
    
    # WM FORCE: set eroded WM to expand (-1)
    WMForceIMG[scipy.ndimage.binary_erosion(ismember(LabelFusionEditedIMG, [2, 41]))] = -1
    
    # WM FORCE: set edited WM = 999 to restrict (1)
    WMForceIMG[LabelFusionEditedIMG == 999] = 1
    # WM FORCE: set edited WM = 998 to expand (-1)
    WMForceIMG[LabelFusionEditedIMG == 998] = -1
    
    # WM FORCE: make sure wm_force is negative in edited WM voxels
    WMForceIMG[scipy.ndimage.binary_erosion(numpy.logical_and(LabelFusionEditedIMG != LabelFusionIMG, ismember(LabelFusionEditedIMG, [2, 41])))] = -1
    WMForceIMG[LabelFusionEditedIMG == 254] = -1
    WMForceIMG[LabelFusionEditedIMG == 255] = -1
    
    NewNII = nibabel.Nifti1Image(numpy.single(WMForceIMG), T2NII.affine)
    nibabel.save(NewNII, os.path.join('SurfReconDeformable', subjID, 'temp', 'wm_force.nii.gz'))
    NewNII = nibabel.Nifti1Image(numpy.single(PialForceIMG), T2NII.affine)
    nibabel.save(NewNII, os.path.join('SurfReconDeformable', subjID, 'temp', 'pial_force.nii.gz'))


if __name__ == "__main__":
    main()
