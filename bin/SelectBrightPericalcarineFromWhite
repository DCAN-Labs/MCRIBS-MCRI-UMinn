#!/usr/bin/env python3

import numpy
import sys
import os
import nibabel
import scipy.ndimage
#import matplotlib.pyplot as plt
#import pylab
import Otsu

import scipy.linalg
import vtk
import vtk.util.numpy_support
import skimage.morphology
import subprocess

def ismember(A, B):
    return numpy.reshape(numpy.in1d(A.ravel(), numpy.array(B)), A.shape)

if len(sys.argv) < 2:
    print("Usage: " + sys.argv[0] + " <subject id>")
    quit()

# fills midline WM labels for regions filling
# replaces small WM components with GM

subjID = sys.argv[1]

try:
    TissueSegDir = os.environ['TISSUESEGDIR']
except:
    TissueSegDir = 'TissueSegMCRIBS'

T2NII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_t2w_restore_brain_dn.nii.gz"))
T2IMG = T2NII.get_fdata()

LabelFusionNII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_labelfusionimage_regions.nii.gz"))
LabelFusionIMG = numpy.uint16(LabelFusionNII.get_fdata())

Atropos3NII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_t2w_restore_brain_dn_atropos3_priors_segmentation.nii.gz"))
Atropos3IMG = numpy.uint8(Atropos3NII.get_fdata())

NII = nibabel.load(os.path.join(TissueSegDir, subjID, subjID + "_t2w_restore_brain_dn_atropos3_priors_segmentation.nii.gz"))
Atropos3IMG = numpy.uint8(Atropos3NII.get_fdata())

T2MinusAverageAverageIMG = T2IMG - scipy.ndimage.uniform_filter(T2IMG, size = 7)
pericalcarineMaskIMG = (T2MinusAverageAverageIMG * ismember(LabelFusionIMG, [1005, 2005, 1011, 2011, 1021, 1013, 2021, 2013])) > 0
NewNII = nibabel.Nifti1Image(numpy.uint8(pericalcarineMaskIMG), LabelFusionNII.affine)
nibabel.save(NewNII, os.path.join(TissueSegDir, subjID, subjID + "_pericalcarine_avg_pos.nii.gz"))

if not os.path.join('SurfReconDeformable', subjID, 'temp', 'white-2.vtp'):
    quit()
subprocess.call(['project-onto-surface', os.path.join('SurfReconDeformable', subjID, 'temp', 'white-2.vtp'), os.path.join('SurfReconDeformable', subjID, 'temp', 'white-pericalcarine_avg_pos.vtp'), '-labels', os.path.join(TissueSegDir, subjID, subjID + "_pericalcarine_avg_pos.nii.gz"), '-dilation-radius', str(1), '-fill', 'False', '-name', 'Pericalcarine'])
# run the
VTPFileName = os.path.join('SurfReconDeformable', subjID, 'temp', 'white-pericalcarine_avg_pos.vtp')

path, ext = os.path.splitext(VTPFileName)

if ext == ".vtp":
    Reader = vtk.vtkXMLPolyDataReader()
elif ext == ".vtk":
    Reader = vtk.vtkPolyDataReader()

Reader.SetFileName(VTPFileName)
Reader.Update()

Data = Reader.GetOutput()

VTPSurface = dict()
VTPSurface['vertices'] = numpy.array(vtk.util.numpy_support.vtk_to_numpy(Data.GetPoints().GetData())).T

if Data.GetNumberOfPolys() > 0:
    VTPSurface['faces'] = numpy.array(vtk.util.numpy_support.vtk_to_numpy(Data.GetPolys().GetData()))
    VTPSurface['faces'] = numpy.reshape(VTPSurface['faces'], (int(VTPSurface['faces'].size / 4), 4)).T
    VTPSurface['faces'] = VTPSurface['faces'][1:]

pointData = Data.GetPointData()

pericalcarineIDX = None
for arrayIDX in range(pointData.GetNumberOfArrays()):
    curArrayName = pointData.GetArrayName(arrayIDX)
    if curArrayName == 'Pericalcarine':
        pericalcarineMask = numpy.array(vtk.util.numpy_support.vtk_to_numpy(pointData.GetArray(arrayIDX)))
        pericalcarineIDX = numpy.where(pericalcarineMask > 0)[0]

pericalcarineVWorld = numpy.take(VTPSurface['vertices'], pericalcarineIDX, axis = 1)
invAffine = scipy.linalg.inv(T2NII.affine)
pericalcarineVVox = numpy.matrix(invAffine[0:3, 0:3]) * numpy.matrix(pericalcarineVWorld) + numpy.atleast_2d(invAffine[0:3, 3]).T

pericalcarineVVoxRound = numpy.int32(numpy.round(pericalcarineVVox))
pericalcarineSeedIMG = numpy.zeros(pericalcarineMaskIMG.shape, dtype = numpy.bool)
pericalcarineSeedIMG[(pericalcarineVVoxRound[0], pericalcarineVVoxRound[1], pericalcarineVVoxRound[2])] = True

# select components from pericalcarineMaskIMG from outMaskIMG
#outMaskIMG = skimage.morphology.reconstruction(numpy.logical_and(pericalcarineSeedIMG, pericalcarineMaskIMG), pericalcarineMaskIMG)

LHCortexMask = numpy.logical_and(LabelFusionIMG >= 1000, LabelFusionIMG < 1036)
RHCortexMask = numpy.logical_and(LabelFusionIMG >= 2000, LabelFusionIMG < 2036)

outMaskIMG = numpy.logical_and(scipy.ndimage.binary_dilation(numpy.logical_and(pericalcarineSeedIMG, pericalcarineMaskIMG), iterations = 4), pericalcarineMaskIMG)

midLineMask = scipy.ndimage.binary_dilation(numpy.logical_and(scipy.ndimage.binary_dilation(LHCortexMask, iterations = 2), scipy.ndimage.binary_dilation(RHCortexMask, iterations = 2)), iterations = 4)

outMaskIMG = numpy.logical_and(outMaskIMG, numpy.logical_not(midLineMask))

#NewNII = nibabel.Nifti1Image(numpy.uint8(outMaskIMG), T2NII.affine)
#nibabel.save(NewNII, os.path.join(TissueSegDir, subjID, subjID + "_pericalcarine_white_mask.nii.gz"))
#NewNII = nibabel.Nifti1Image(numpy.uint8(outMaskIMG), T2NII.affine)
#nibabel.save(NewNII, os.path.join(TissueSegDir, subjID, subjID + " .nii.gz"))

WMForceNII = nibabel.load(os.path.join('SurfReconDeformable', subjID, 'temp', 'wm_force.nii.gz'))
WMForceIMG = WMForceNII.get_fdata()

outWMForceIMG = WMForceIMG - numpy.double(outMaskIMG) * 1

NewNII = nibabel.Nifti1Image(numpy.single(outWMForceIMG), T2NII.affine)
nibabel.save(NewNII, os.path.join('SurfReconDeformable', subjID, 'temp', 'wm_force_second.nii.gz'))

#print(invAffine)
#print(pericalcarineIDX)
#print(VTPSurface)
#print(pericalcarineVVox)
#
#ROtsu = Otsu.robustOtsu(T2IMG[GMSegIMG], None, NumberClasses = 3)
#
#GMOtsuIMG = numpy.zeros(T2IMG.shape, dtype = numpy.uint8)
#GMOtsuIMG[GMSegIMG] = ROtsu + 1
#
#GMOtsuIMGDilateMask = numpy.logical_and(numpy.logical_or(GMOtsuIMG == 3, GMOtsuIMG == 0), numpy.logical_not(ismember(LabelFusionIMG, [1035, 2035])))
#
#outMask = DarkWMIMG > 0.3
#
#for z in range(7):
#    outMask = numpy.logical_and(scipy.ndimage.binary_dilation(outMask), GMOtsuIMGDilateMask)
#
#outIMG = numpy.logical_and(GMSegIMG, numpy.logical_not(outMask))
#
#NewNII = nibabel.Nifti1Image(numpy.uint8(outMask), LabelFusionNII.affine)
#nibabel.save(NewNII, os.path.join(TissueSegDir, subjID, subjID + "_dark_wm_bright_gm_to_remove.nii.gz"))
#NewNII = nibabel.Nifti1Image(numpy.uint8(outIMG), LabelFusionNII.affine)
#nibabel.save(NewNII, os.path.join(TissueSegDir, subjID, subjID + "_segmentation_gm.nii.gz"))
#
#H, BINS = numpy.histogram(T2IMG[GMOtsuIMG > 0], bins=200, range=None, normed=None, weights=None, density=True)

#plt.hist(T2IMG[GMOtsuIMG > 0], bins=200)
#plt.xticks([numpy.min(T2IMG[GMOtsuIMG == 2]), numpy.min(T2IMG[GMOtsuIMG == 3])])
#F = pylab.gcf()
#F.set_size_inches((20, 10), forward = True)
#os.makedirs('GMOtsuHist', exist_ok = True)
#plt.savefig(os.path.join('GMOtsuHist', subjID + "_gm_hist.png"))
#NewNII = nibabel.Nifti1Image(numpy.single(numpy.mean(numpy.single(allDKTIMG == 1021), axis = 3)), LabelFusionNII.affine)
#nibabel.save(NewNII, os.path.join(TissueSegDir, subjID, subjID + "_all_lh_pericalcarine.nii.gz"))

#NewNII = nibabel.Nifti1Image(numpy.single(numpy.mean(numpy.single(allDKTIMG == 2021), axis = 3)), LabelFusionNII.affine)
#nibabel.save(NewNII, os.path.join(TissueSegDir, subjID, subjID + "_all_rh_pericalcarine.nii.gz"))

#NewNII = nibabel.Nifti1Image(numpy.uint8(VoxelsToReplace), LabelFusionNII.affine)
#nibabel.save(NewNII, os.path.join(TissueSegDir, subjID, subjID + "_voxelstoreplace.nii.gz"))
