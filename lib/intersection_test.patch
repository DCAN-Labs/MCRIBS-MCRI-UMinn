--- ./VTK/VTK/Filters/General/vtkIntersectionPolyDataFilter.cxx	2019-11-07 13:18:31.143575760 +1100
+++ ./b/Filters/General/vtkIntersectionPolyDataFilter.cxx	2019-11-07 18:32:01.999498634 +1100
@@ -2095,37 +2095,42 @@
   int index1 = 0, index2 = 0;
   double t1[3], t2[3];
   int ts1=50, ts2=50;
-  for (int i = 0; i < 3; i++)
+  double tolerancemul = 1;
+
+  while(ts1 == 50 || ts2 == 50 && ((tolerance * tolerancemul) < 1))
   {
-    double t, x[3];
-    int id1 = i, id2 = (i+1) % 3;
+      for (int i = 0; i < 3; i++)
+      {
+        double t, x[3];
+        int id1 = i, id2 = (i+1) % 3;
 
-    // Find t coordinate on line of intersection between two planes.
-    double val1 = vtkPlane::IntersectWithLine(pts1[id1], pts1[id2], n2, p2, t, x);
-    if (val1 == 1 ||
-        (t > (0-tolerance) && t < (1+tolerance)))
-    {
-         if (t < 1+tolerance && t > 1-tolerance)
-         {
-           ts1 = index1;
-         }
+        // Find t coordinate on line of intersection between two planes.
+        double val1 = vtkPlane::IntersectWithLine(pts1[id1], pts1[id2], n2, p2, t, x);
+        if (val1 == 1 ||
+            (t > (0-tolerance*tolerancemul) && t < (1+tolerance*tolerancemul)))
+        {
+             if (t < 1+tolerance*tolerancemul && t >= 1-tolerance*tolerancemul)
+             {
+               ts1 = index1;
+             }
 
-         t1[index1++] = vtkMath::Dot(x, v) - vtkMath::Dot(p, v);
-    }
+             t1[index1++] = vtkMath::Dot(x, v) - vtkMath::Dot(p, v);
+        }
 
-    double val2 = vtkPlane::IntersectWithLine(pts2[id1], pts2[id2], n1, p1, t, x);
-    if (val2 == 1 ||
-        (t > (0-tolerance) && t < (1+tolerance)))
-    {
-        if (t < 1+tolerance && t > 1-tolerance)
+        double val2 = vtkPlane::IntersectWithLine(pts2[id1], pts2[id2], n1, p1, t, x);
+        if (val2 == 1 ||
+            (t > (0-tolerance*tolerancemul) && t < (1+tolerance*tolerancemul)))
         {
-          ts2 = index2;
-        }
+            if (t < 1+tolerance*tolerancemul && t >= 1-tolerance*tolerancemul)
+            {
+              ts2 = index2;
+            }
 
-        t2[index2++] = vtkMath::Dot(x, v) - vtkMath::Dot(p, v);
-    }
+            t2[index2++] = vtkMath::Dot(x, v) - vtkMath::Dot(p, v);
+        }
+      }
+    tolerancemul *= 10; 
   }
-
   //If the value of the index is greater than 2, the intersecting point
   //actually is intersected by all three edges. In this case, set the two
   //edges to the two edges where the intersecting point is not the end point
